// ðŸ“š LEXIPOP PRISMA SCHEMA
// Vocabulary learning game with scores, leaderboard, and quiz data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Vocabulary words for the quiz
model Word {
  id                   Int      @id @default(autoincrement())
  word                 String   @unique
  correctDefinition    String
  incorrectDefinition1 String
  incorrectDefinition2 String
  incorrectDefinition3 String

  // Metadata
  difficulty     Int     @default(1) // 1-5 scale
  category       String? // e.g., 'academic', 'business', 'science'
  sourceLanguage String  @default("english")
  partOfSpeech   String? // noun, verb, adjective, etc.

  // Analytics
  timesShown           Int   @default(0)
  timesCorrect         Int   @default(0)
  averageResponseTime  Float? // milliseconds

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastShown DateTime?

  // Relations
  questionResponses QuestionResponse[]

  @@map("words")
}

// Game sessions - each completed game
model GameSession {
  id       String @id @default(cuid())
  gameId   String @unique
  userFid  Int

  // Game results
  score          Int
  totalQuestions Int
  streak         Int   @default(0)
  accuracy       Float // percentage

  // Timing
  gameStartTime DateTime
  gameEndTime   DateTime
  totalDuration Int // milliseconds

  // Rewards
  tokensEarned    Int   @default(0)
  bonusMultiplier Float @default(1)

  // Metadata
  createdAt DateTime @default(now())

  // Relations
  questionResponses QuestionResponse[]
  userStats         UserStats?         @relation(fields: [userFid], references: [userFid])

  @@map("game_sessions")
}

// Individual question responses within a game
model QuestionResponse {
  id            Int    @id @default(autoincrement())
  gameSessionId String
  wordId        Int

  // Response data
  selectedAnswer String
  isCorrect      Boolean
  responseTime   Int // milliseconds
  questionOrder  Int // 1-5 within game

  // Context - JSON array of all 4 shuffled options
  shuffledOptions String // JSON string

  // Timestamp
  answeredAt DateTime @default(now())

  // Relations
  gameSession GameSession @relation(fields: [gameSessionId], references: [id])
  word        Word        @relation(fields: [wordId], references: [id])

  @@map("question_responses")
}

// User statistics and leaderboard data
model UserStats {
  id      Int @id @default(autoincrement())
  userFid Int @unique

  // Overall performance
  totalGamesPlayed        Int @default(0)
  totalQuestionsAnswered  Int @default(0)
  totalCorrectAnswers     Int @default(0)

  // Best scores for leaderboard
  highestScore       Int   @default(0)
  longestStreak      Int   @default(0)
  bestAccuracy       Float @default(0)
  fastestAverageTime Float? // milliseconds

  // Tokens and rewards
  totalTokensEarned Int @default(0)
  totalSpins        Int @default(0)

  // Streaks and achievements
  currentDailyStreak Int @default(0)
  longestDailyStreak Int @default(0)
  lastPlayedDate     DateTime?

  // Difficulty progression
  currentDifficultyLevel Int @default(1)
  wordsLearned           Int @default(0) // unique words answered correctly

  // Timestamps
  firstGameAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  gameSessions GameSession[]

  @@map("user_stats")
}

// Word categories for organization
model Category {
  id              Int     @id @default(autoincrement())
  name            String  @unique
  description     String?
  difficultyRange String? // e.g., "1-3" for beginner categories
  wordCount       Int     @default(0)
  isActive        Boolean @default(true)

  createdAt DateTime @default(now())

  @@map("categories")
}

// Import batches for tracking bulk vocabulary uploads
model ImportBatch {
  id          Int    @id @default(autoincrement())
  batchName   String
  description String?

  // Import stats
  totalWords        Int @default(0)
  successfulImports Int @default(0)
  failedImports     Int @default(0)
  duplicatesSkipped Int @default(0)

  // Metadata
  sourceFile String?
  importedBy String? // admin user identifier
  status     String  @default("pending") // pending, processing, completed, failed

  // Timestamps
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@map("import_batches")
}